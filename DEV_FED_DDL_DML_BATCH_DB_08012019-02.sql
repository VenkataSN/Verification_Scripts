-- ===========================================================================
-- Author:          Vairavan Chandrasekhar
-- File Name:	    DDL_DML_BATCH_DB_08012019-01.sql
-- Create date:     07/17/2019
-- Description:     Script to get all the tables and data in Federal EDI schema
-- ===========================================================================

-- This disk group name is only for CERT. For QA and PROD, DBA's need to find this from DB as IP do not have this information
-- select * from dba_temp_files
--CREATE TABLESPACE LEG_TRACKING_DATA DATAFILE
--  '+EDFXCRT_DG1' SIZE 1M AUTOEXTEND ON NEXT 128M MAXSIZE UNLIMITED
--ONLINE
--EXTENT MANAGEMENT LOCAL AUTOALLOCATE
--BLOCKSIZE 8K
--SEGMENT SPACE MANAGEMENT AUTO
--FLASHBACK ON;

--CREATE TABLESPACE LEG_TRACKING_INDEX DATAFILE
--  '+EDFXCRT_DG1' SIZE 1M AUTOEXTEND ON NEXT 128M MAXSIZE UNLIMITED
--ONLINE
--EXTENT MANAGEMENT LOCAL AUTOALLOCATE
--BLOCKSIZE 8K
--SEGMENT SPACE MANAGEMENT AUTO
--FLASHBACK ON;

-- ===========================================================================
--					TABLES
-- ===========================================================================
-- Table 1
CREATE TABLE DEV_FED.TBLALLOWDENYMATCHING (
	SEQ			NUMBER NOT NULL,
	ADDUSER			VARCHAR2(50) DEFAULT 'EDI' NOT NULL,
	ADDDATE			TIMESTAMP (3) DEFAULT SYSTIMESTAMP NOT NULL,
	CHANGEUSER		VARCHAR2(50) DEFAULT 'EDI' NOT NULL,
	CHANGEDATE		TIMESTAMP (3) DEFAULT SYSTIMESTAMP NOT NULL,
	STATUS			CHAR(1) NOT NULL,
	MATCHCLASS		CHAR(3),
	MATCHTYPE		CHAR(1) NOT NULL,
	PRIORITY		FLOAT(126) NOT NULL,
	CLIENTID		VARCHAR2(15) NOT NULL,
	PRODUCTID		VARCHAR2(3) NOT NULL,
	TYPEID			VARCHAR2(3) NOT NULL,
	DESTID			VARCHAR2(15) NOT NULL,
	NAMEPATTERN		VARCHAR2(255) NOT NULL,
	ACTIVE_IND		NUMBER DEFAULT 1
) TABLESPACE LEG_TRACKING_DATA;

-- Primary Key
ALTER TABLE DEV_FED.TBLALLOWDENYMATCHING ADD CONSTRAINT PK_TBLALLOWDENYMATCHING PRIMARY KEY (seq);
CREATE UNIQUE INDEX DEV_FED.IX_TBLALLOWDENYMATCHING1 ON DEV_FED.TBLALLOWDENYMATCHING (MATCHCLASS, MATCHTYPE, CLIENTID, PRODUCTID, TYPEID, DESTID, NAMEPATTERN)  ONLINE TABLESPACE LEG_TRACKING_INDEX;
CREATE INDEX DEV_FED.IX_TBLALLOWDENYMATCHING2 ON DEV_FED.TBLALLOWDENYMATCHING (MATCHCLASS, MATCHTYPE, PRIORITY, CLIENTID, PRODUCTID, TYPEID, DESTID)  ONLINE TABLESPACE LEG_TRACKING_INDEX;
ALTER TABLE DEV_FED.TBLALLOWDENYMATCHING ADD CONSTRAINT IX_TBLALLOWDENYMATCHING1 UNIQUE (MATCHCLASS, MATCHTYPE, CLIENTID, PRODUCTID, TYPEID, DESTID, NAMEPATTERN) USING INDEX;

-- Table 2
CREATE TABLE DEV_FED.TBLCLIENTCOMM (
	CLIENTCOMMSEQ		NUMBER NOT NULL, 
	CLIENTID		VARCHAR2(15) NOT NULL, 
	STATUS			CHAR(1) NOT NULL, 
	LOGIN			VARCHAR2(25),
	PASSWORD		VARCHAR2(25),
	BBSID			CHAR(3),
	COMPRESSIONID		CHAR(3),
	ENCRYPTIONID		CHAR(3),
	PROTOCOLID		CHAR(3),
	ADDUSER			VARCHAR2(50) DEFAULT 'EDI' NOT NULL,
	ADDDATE			TIMESTAMP (3) DEFAULT SYSTIMESTAMP NOT NULL,
	CHANGEUSER		VARCHAR2(50) DEFAULT 'EDI' NOT NULL,
	CHANGEDATE		TIMESTAMP (3) DEFAULT SYSTIMESTAMP NOT NULL,
	PRODUCTID		CHAR(3), 
	CLIENTNAME		VARCHAR2(100), 
	ENCRYPTIONIDOUT		CHAR(3), 
	ALTMAILBOX		VARCHAR2(25), 
	ALTMAILBOXFLAG		CHAR(1) DEFAULT 'N' NOT NULL,
	EXPBSENDTRLFLAG		CHAR(1) DEFAULT 'N' NOT NULL,
	EXPBSTRIPTRLFLAG	CHAR(1) DEFAULT 'N' NOT NULL,
	RENAMEREPORTFLAG	CHAR(1) DEFAULT 'N' NOT NULL,
	CONSTRAINT		IX_TBLCLIENTCOMM1 UNIQUE (CLIENTID) USING INDEX TABLESPACE LEG_TRACKING_INDEX ,
	CONSTRAINT		PK_TBLCLIENTCOMM PRIMARY KEY (CLIENTCOMMSEQ) USING INDEX TABLESPACE LEG_TRACKING_INDEX 
) TABLESPACE LEG_TRACKING_DATA;

-- Table 3
CREATE TABLE DEV_FED.TBLCLIENTENROLLMENT(
	CLIENTSEQ		NUMBER NOT NULL,
	ADDUSER			VARCHAR2(50) DEFAULT 'EDI' NOT NULL,
	ADDDATE			TIMESTAMP (3) DEFAULT SYSTIMESTAMP NOT NULL,
	CHANGEUSER		VARCHAR2(50) DEFAULT 'EDI' NOT NULL,
	CHANGEDATE		TIMESTAMP (3) DEFAULT SYSTIMESTAMP NOT NULL,
	CLIENTID		VARCHAR2(15 BYTE) NOT NULL,
	VWCLIENTID		VARCHAR2(25 BYTE) NOT NULL,
	IMPCONTACT		VARCHAR2(50 BYTE),
	IMPPHONE		VARCHAR2(25 BYTE),
	IMPEMAIL		VARCHAR2(50 BYTE),
	IMPDATE			DATE,
	PSCLIENTID		VARCHAR2(25 BYTE),
	MNEMONIC		VARCHAR2(25 BYTE),
	MIGRATIONDATE		DATE,
	GWCLIENTID		VARCHAR2(25 BYTE),
	GWDESTID		VARCHAR2(25 BYTE),
	RTECLIENTID		VARCHAR2(36 BYTE),
	CLEARINGCLMS		VARCHAR2(6 BYTE),
	CLEARINGELIG		VARCHAR2(6 BYTE),
	CONSTRAINT		IX_TBLCLIENTENROLLMENT1 UNIQUE (CLIENTID) USING INDEX TABLESPACE LEG_TRACKING_INDEX ,
	CONSTRAINT		PK_TBLCLIENTENROLLMENT PRIMARY KEY (CLIENTSEQ) USING INDEX TABLESPACE LEG_TRACKING_INDEX 
) TABLESPACE LEG_TRACKING_DATA;

-- Table 4
CREATE TABLE DEV_FED.TBLDESTTYPES (
	TYPESEQ		NUMBER NOT NULL, 
	ADDUSER		VARCHAR2(50) DEFAULT 'EDI' NOT NULL,
	ADDDATE		TIMESTAMP (3) DEFAULT SYSTIMESTAMP NOT NULL,
	CHANGEUSER	VARCHAR2(50) DEFAULT 'EDI' NOT NULL,
	CHANGEDATE	TIMESTAMP (3) DEFAULT SYSTIMESTAMP NOT NULL,
	TYPEID		CHAR(3 BYTE) NOT NULL, 
	TYPECLASS	VARCHAR2(15 BYTE) NOT NULL, 
	DESCRIPTION	VARCHAR2(100 BYTE),
  	CONSTRAINT	IX_TBLDESTTYPES1 UNIQUE (TYPEID, TYPECLASS) USING INDEX TABLESPACE LEG_TRACKING_INDEX, 
	CONSTRAINT	PK_TBLDESTTYPES PRIMARY KEY (TYPESEQ) USING INDEX TABLESPACE LEG_TRACKING_INDEX 
) TABLESPACE LEG_TRACKING_DATA;
	
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'CLM', 'OUTPUT', 'Claim Output Files');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'RPT', 'INPUT', 'Report Input Files');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'INF', 'STATUS', 'Information Status');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'ERR', 'STATUS', 'Error Status');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'RCV', 'STATUS', 'Received Status');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'CMP', 'STATUS', 'Complete Status');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'RTE', 'STATUS', 'Route Status');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'ARC', 'STATUS', 'Archive Status');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'FIX', 'STATUS', 'Fix Status');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'RSB', 'STATUS', 'Resub Status');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'PRC', 'STATUS', 'Processing By App');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'ACK', 'INPUT', 'Acknowledgement Input Files');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'ZIP', 'STATUS', 'Compression Status');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'SCR', 'OUTPUT', 'Scrubber Output Files');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'TRG', 'OUTPUT', 'Scrubber Trigger Files');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'RPS', 'INPUT', 'Scrubber Input Files');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'SCB', 'STATUS', 'Scrubber Status');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'DCR', 'STATUS', 'Encryption Status');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'TRN', 'STATUS', 'Transmitted Status');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'ACK', 'STATUS', 'Acknowledged Status');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'STM', 'OUTPUT', 'Statement Output Files');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'RMT', 'INPUT', 'Remittance Input Files');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'TST', 'STATUS', 'Test Status');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'ELG', 'OUTPUT', 'Eligibility Output Files');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'ERS', 'INPUT', 'Eligibility Response Files');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'IMZ', 'OUTPUT', 'Immunization Output Files');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'LET', 'OUTPUT', 'Letter Output Files');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'REM', 'OUTPUT', 'Reminder Output Files');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'CAL', 'OUTPUT', 'Call Output Files');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'CLN', 'OUTPUT', 'Scrubber Clean Files');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'OTH', 'OUTPUT', 'Other Files');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'BAL', 'OUTPUT', 'Online Bill Pay Service');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'PMT', 'INPUT', 'Emdeon Remittance Input Files');
INSERT INTO DEV_FED.tbldesttypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLDESTTYPES1.NEXTVAL, 'RMT', 'OUTPUT', 'Remittance Output Files');

-- Table 5
CREATE TABLE DEV_FED.TBLPRODUCTS (
	SEQ			NUMBER NOT NULL, 
	ADDUSER			VARCHAR2(50) DEFAULT 'EDI' NOT NULL,
	ADDDATE			TIMESTAMP (3) DEFAULT SYSTIMESTAMP NOT NULL,
	CHANGEUSER		VARCHAR2(50) DEFAULT 'EDI' NOT NULL,
	CHANGEDATE		TIMESTAMP (3) DEFAULT SYSTIMESTAMP NOT NULL,
	PRODUCTID		CHAR(3 BYTE) NOT NULL, 
	BBSID			CHAR(3 BYTE), 
	COMPRESSIONIDOUT	CHAR(3 BYTE), 
	COMPRESSIONIDIN		CHAR(3 BYTE), 
	ENCRYPTIONIDOUT		CHAR(3 BYTE), 
	ENCRYPTIONIDIN		CHAR(3 BYTE), 
	PROTOCOLID		CHAR(3 BYTE), 
	DESCRIPTION		VARCHAR2(100 BYTE) NOT NULL,
  	CONSTRAINT IX_TBLPRODUCTS1 UNIQUE (PRODUCTID) USING INDEX TABLESPACE LEG_TRACKING_INDEX, 
	CONSTRAINT PK_TBLPRODUCTS PRIMARY KEY (SEQ) USING INDEX TABLESPACE LEG_TRACKING_INDEX 
   ) TABLESPACE LEG_TRACKING_DATA;

INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'CCI', 'CCI');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'CMD', 'CMED');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'CTA', 'CTA');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'D_R', 'DR');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'DM4', 'DM 4000');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'DMO', 'DMO');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'IPM', 'Institutional VWPM');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'KIR', 'Kiron');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'KRE', 'Kredo');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'MED', 'Medfax');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'MSI', 'MSI');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'PAR', 'PAR');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'PMS', 'PM Station');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'PRE', 'Prism Enterprise');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'PRI', 'Prism');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'PRO', 'Promed');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'SDM', 'SDM');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'SEN', 'Sentinal');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'TMD', 'TMED');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'VPM', 'VWPM Intuition - Specialty PM');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'WIS', 'WISDOM');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'VWE', 'Vitalworks Enterprise - CPE - PWPM');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'VWI', 'Vitalworks Enterprise Ideal');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'ADV', 'Advantage');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'MIL', 'Millennium');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'RDC', 'RDC Internal');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'PDS', 'PDS Solution');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'CPM', 'Cerner PM');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'SF ', 'Soarian Financials');
INSERT INTO DEV_FED.tblproducts(seq, adddate, adduser, changedate, changeuser, PRODUCTID, DESCRIPTION ) VALUES (DEV_FED.SEQ_TBLPRODUCTS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'PAC', 'Long Term Post Acute Care');

-- Table 6
CREATE TABLE DEV_FED.TBLSOURCETYPES (
	TYPESEQ		NUMBER NOT NULL, 
	ADDUSER		VARCHAR2(50) DEFAULT 'EDI' NOT NULL,
	ADDDATE		TIMESTAMP (3) DEFAULT SYSTIMESTAMP NOT NULL,
	CHANGEUSER	VARCHAR2(50) DEFAULT 'EDI' NOT NULL,
	CHANGEDATE	TIMESTAMP (3) DEFAULT SYSTIMESTAMP NOT NULL,
	TYPEID		CHAR(3 BYTE) NOT NULL, 
	TYPECLASS	VARCHAR2(15 BYTE) NOT NULL, 
	DESCRIPTION	VARCHAR2(100 BYTE),
  	CONSTRAINT	IX_TBLSOURCETYPES1 UNIQUE (TYPEID, TYPECLASS) USING INDEX TABLESPACE LEG_TRACKING_INDEX, 
	CONSTRAINT	PK_TBLSOURCETYPES PRIMARY KEY (TYPESEQ) USING INDEX TABLESPACE LEG_TRACKING_INDEX 
) TABLESPACE LEG_TRACKING_DATA;

INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'CLM', 'INPUT', 'Claim Input Files');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'RPT', 'OUTPUT', 'Report Output Files');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'INF', 'STATUS', 'Information Status');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'ERR', 'STATUS', 'Error Status');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'RCV', 'STATUS', 'Received Status');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'CMP', 'STATUS', 'Complete Status');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'RTE', 'STATUS', 'Route Status');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'ARC', 'STATUS', 'Archive Status');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'FIX', 'STATUS', 'Fix Status');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'RSB', 'STATUS', 'Resub Status');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'PRC', 'STATUS', 'Processing By App');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'ACK', 'OUTPUT', 'Acknowledgement Output Files');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'ZIP', 'STATUS', 'Compression Status');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'SCR', 'INPUT', 'Scrubber Input Files');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'TRG', 'INPUT', 'Trigger Input Files');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'RPS', 'OUTPUT', 'Scrubber Output Files');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'SCB', 'STATUS', 'Scrubber Status');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'DCR', 'STATUS', 'Encryption Status');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'TRN', 'STATUS', 'Transmitted Status');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'ACK', 'STATUS', 'Acknowledged Status');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'STM', 'INPUT', 'Statement Input Files');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'RMT', 'OUTPUT', 'Remittance Output Files');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'TST', 'STATUS', 'Test Status');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'ELG', 'INPUT', 'Eligibility Input Files');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'UNK', 'INPUT', 'Unknown Input Files');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'ERS', 'OUTPUT', 'Eligibility Response Files');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'BUL', 'OUTPUT', 'Bulletin Output Files');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'IMZ', 'INPUT', 'Immunization Input Files');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'LET', 'INPUT', 'Letter Input Files');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'REM', 'INPUT', 'Reminder Input Files');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'CAL', 'INPUT', 'Call Input Files');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'CLN', 'INPUT', 'Scrubber Clean Files');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'BAL', 'INPUT', 'Online Billpay Service');
INSERT INTO DEV_FED.tblsourcetypes(typeseq, typeid, typeclass, description) VALUES (DEV_FED.SEQ_TBLSOURCETYPES1.NEXTVAL, 'PMT', 'OUTPUT', 'Emdeon Remittance Output Files');

-- Table 7
CREATE TABLE DEV_FED.TBLAPPLICATIONS  (
	APPLICATIONSEQ	NUMBER NOT NULL,
	ADDUSER		VARCHAR2(50) DEFAULT 'EDI' NOT NULL,
	ADDDATE		TIMESTAMP (3) DEFAULT SYSTIMESTAMP NOT NULL,
	APPID		VARCHAR2(7) NOT NULL,
	DESCRIPTION	VARCHAR2(100),
	ACTIVE_IND	NUMBER DEFAULT 1,
	CONSTRAINT	PK_TBLAPPLICATIONS PRIMARY KEY (APPLICATIONSEQ) USING INDEX TABLESPACE LEG_TRACKING_INDEX 
) TABLESPACE LEG_TRACKING_DATA;

CREATE UNIQUE INDEX DEV_FED.IX_TBLAPPLICATIONS1 ON DEV_FED.TBLAPPLICATIONS (APPID) ONLINE TABLESPACE LEG_TRACKING_INDEX;
ALTER TABLE DEV_FED.TBLAPPLICATIONS ADD CONSTRAINT IX_TBLAPPLICATIONS1 UNIQUE (APPID) USING INDEX;

INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'WCR','Wildcat BBS Router');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'SFR','SFTP Router');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'SSR','System Source Router');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'MCR','McKesson Router');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'MCF','McKesson FTP');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'SCR','Scrubber Router');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'DER','Dest Router');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'PRC','Processor');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'GWR','GateWorks Router');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'STL','Status Loader');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'RSR','Resub Router');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'RDV','RDC Viewer');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'NDF','NDC FTP');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'HEF','HENN FTP');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'PEF','PerSe FTP');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'GYR','Gateway Router');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'TEF','Televox sFTP');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S00','svcCommonComponents');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S01','svcClientFileRouterIn');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S02','svcClaimFmtRouterIn');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S03','svcClaimFmtRouterScrIn');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S04','svcClaimFmtRouterOut');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S05','svc8372837Eval');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S06','svc8372837ScrOut');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S07','svcENSF2ENSFEval');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S08','svcENSF2ENSFScrOut');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S09','svcUB2UBEval');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S10','svcUB2UBScrOut');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S11','svcScrubberIOIn');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S12','svcScrubberIOOut');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S13','svcPrintFmtRouterIn');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S14','svcPrint2PrintMckEval');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S15','svcPrint2PrintNDCEval');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S16','svcPrint2PrintPerSeEval');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S17','svcCallFmtRouterIn');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S18','svcCall2CallTelevoxEval');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S19','svcImmunizationFmtRouterIn');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S20','svcImz2ImzHennepinEval');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S21','svcEligibilityFmtRouterIn');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S22','svc2702270Eval');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S23','svcClient2Dest');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S24','svcDestFileRouterOut');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S25','svcArchiveRouter');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'F2Q','File 2 Queue Router');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S26','svc8372837Split');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S27','svcNewChildFile');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S28','svcDestFileRouterIn');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S29','svcDest2Client');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S30','svcClientFileRouterOut');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S31','svcTVSReportProcess');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S32','svcPERSEReportProcess');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S33','svcNDCReportSplit');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S34','svcNDCReportProcess');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S35','svc627411ReportIn');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S36','svc627411ReportANSI');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S37','svc627411ReportData');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'PIF','Practice Insight sFTP');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S38','svcPrint2PrintEXPBEval');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'EBF','ExpressBill sFTP');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S39','svcPRAINReportProcess');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S40','svcEXPBReportProcess');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'S41','svcEMDReportProcess');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'GEF','Gateway EDI sFTP');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ECLMSPL','Edifecs Claims Split');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ED1','837D_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ED2','TM_Ack_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ED3','Error_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ED4','Edifecs 837D Route 4');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ER1','835D_Route_ER1');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ER2','TM_Ack_Route_ER2');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ER3','Error_Route_ER3');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ER4','Edifecs 835D Route 4');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'EIPSPLT','837IP_Split_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'APF','Apex sFTP');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ERMFARC','835_File_Archival_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ERMTM','835_TM_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ERMTMAK','835_TM_ACK_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'EPRACK','HDXTS_NX12_PRAIN_ACK_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'EPRAKER','HDXTS_NX12_PRAIN_ACK_Error_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ENXDFF1','HDXTS_NONX12_DFF_REPORTS_MAIN_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ENXDFF9','HDXTS_NONX12_DFF_REPORTS_ERROR_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ENXMA12','HDXTS_NONX12_MCKESSON_ACKS_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ENXRACK','HDXTS_NONX12_REPORTS_ACKS_MAIN_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ENXPFF9','HDXTS_NONX12_PFF_REPORTS_ERROR_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'EIPMAIN','837_Gateway');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'EIPSISA','837IP_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'EIPMISA','837IP_ISA_Split_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ENXPACK','Edifecs Non-X12 Partner Acknowledgements');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ENXSTLT','Edifecs Non-X12 Statements and Letters');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'MEF','Megas sFTP');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'EPAKX12','HDXTS_X12_PARTNER_ACKS_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'EPAKERR','HDXTS_X12_PARTNER_ACKS_Error_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'EAKSRDM','HDXTS_X12_PARTNER_ACKS_SenderReceiver_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'EIPSRDM','837IP_SenderReceiver_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'EIPERR','837IP_Error_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'EIPTMAK','837IP_TM_ACK_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ERMMAIN','835_Main_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ERMCHK','835_Remit_Check_Route');
INSERT INTO DEV_FED.TBLAPPLICATIONS (applicationseq, appid,description) VALUES (DEV_FED.SEQ_TBLAPPLICATIONS1.NEXTVAL,'ERMERR','835_Error_Route');

-- Table 8
CREATE TABLE DEV_FED.TBLDESTCOMM (
	DESTCOMMSEQ		NUMBER NOT NULL, 
	ADDUSER			VARCHAR2(50) DEFAULT 'EDI' NOT NULL,
	ADDDATE			TIMESTAMP (3) DEFAULT SYSTIMESTAMP NOT NULL,
	CHANGEUSER		VARCHAR2(50) DEFAULT 'EDI' NOT NULL,
	CHANGEDATE		TIMESTAMP (3) DEFAULT SYSTIMESTAMP NOT NULL,
	DESTID			VARCHAR2(15 BYTE) NOT NULL, 
	DESTNAME		VARCHAR2(100 BYTE), 
	STATUS			CHAR(1 BYTE) NOT NULL, 
	LOGIN			VARCHAR2(25 BYTE), 
	PASSWORD		VARCHAR2(25 BYTE), 
	COMPRESSIONIDIN		CHAR(3 BYTE), 
	COMPRESSIONIDOUT	CHAR(3 BYTE), 
	ENCRYPTIONIDIN		CHAR(3 BYTE), 
	ENCRYPTIONIDOUT		CHAR(3 BYTE), 
	PROTOCOLID		CHAR(3 BYTE), 
	PRODUCTID		CHAR(3 BYTE), 
	CONSTRAINT		IX_TBLDESTCOMM1 UNIQUE (DESTID) USING INDEX TABLESPACE LEG_TRACKING_INDEX , 
	CONSTRAINT		PK_TBLDESTCOMM PRIMARY KEY (DESTCOMMSEQ) USING INDEX TABLESPACE LEG_TRACKING_INDEX
  )TABLESPACE LEG_TRACKING_DATA;

-- Table 9
CREATE TABLE DEV_FED.TBLDESTENROLLMENT 
   (	DESTSEQ			NUMBER NOT NULL, 
	ADDUSER			VARCHAR2(50) DEFAULT 'EDI' NOT NULL,
	ADDDATE			TIMESTAMP (3) DEFAULT SYSTIMESTAMP NOT NULL,
	CHANGEUSER		VARCHAR2(50) DEFAULT 'EDI' NOT NULL,
	CHANGEDATE		TIMESTAMP (3) DEFAULT SYSTIMESTAMP NOT NULL,
	DESTID			VARCHAR2(15 BYTE) NOT NULL, 
	VWDESTID		VARCHAR2(25 BYTE) NOT NULL, 
	IMPCONTACT		VARCHAR2(50 BYTE), 
	IMPPHONE		VARCHAR2(25 BYTE), 
	IMPEMAIL		VARCHAR2(50 BYTE), 
	IMPDATE			DATE, 
	PSDESTID		VARCHAR2(25 BYTE), 
	MNEMONIC		VARCHAR2(25 BYTE), 
	MIGRATIONDATE		DATE, 
	GWDESTID		VARCHAR2(25 BYTE), 
	CONSTRAINT		IX_TBLDESTENROLLMENT1 UNIQUE (DESTID) USING INDEX TABLESPACE LEG_TRACKING_INDEX , 
        CONSTRAINT		PK_TBLDESTENROLLMENT PRIMARY KEY (DESTSEQ) USING INDEX TABLESPACE LEG_TRACKING_INDEX 
  )TABLESPACE LEG_TRACKING_DATA ;

CREATE INDEX DEV_FED.IX_TBLDESTENROLLMENT2 ON DEV_FED.TBLDESTENROLLMENT (VWDESTID) TABLESPACE LEG_TRACKING_INDEX;
CREATE INDEX DEV_FED.IX_TBLDESTENROLLMENT3 ON DEV_FED.TBLDESTENROLLMENT (IMPDATE) TABLESPACE LEG_TRACKING_INDEX;
CREATE INDEX DEV_FED.IX_TBLDESTENROLLMENT4 ON DEV_FED.TBLDESTENROLLMENT (PSDESTID) TABLESPACE LEG_TRACKING_INDEX;
CREATE INDEX DEV_FED.IX_TBLDESTENROLLMENT5 ON DEV_FED.TBLDESTENROLLMENT (MNEMONIC) TABLESPACE LEG_TRACKING_INDEX;

-- Table 10
CREATE TABLE DEV_FED.TBLOPTIONS
   (	SEQ		NUMBER NOT NULL, 
	ADDUSER		VARCHAR2(50) DEFAULT 'TRACKING',
	ADDDATE		TIMESTAMP (3) DEFAULT SYSTIMESTAMP,
	CHANGEUSER	VARCHAR2(50) DEFAULT 'TRACKING',
	CHANGEDATE	TIMESTAMP (3) DEFAULT SYSTIMESTAMP,
	GROUPID		VARCHAR2(15 BYTE) NOT NULL, 
	TYPEID		VARCHAR2(3 BYTE) NOT NULL, 
	DESCRIPTION	VARCHAR2(100 BYTE) NOT NULL, 
	 CONSTRAINT	IX_TBLOPTIONS1 UNIQUE (GROUPID, TYPEID) USING INDEX TABLESPACE LEG_TRACKING_INDEX, 
	 CONSTRAINT	PK_TBLOPTIONS PRIMARY KEY (SEQ) USING INDEX TABLESPACE LEG_TRACKING_INDEX 
   ) TABLESPACE LEG_TRACKING_DATA ;

INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'STATUS', 'A', 'Active'); 
INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'STATUS', 'I', 'Inactive'); 
INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'STATUS', 'T', 'Test'); 
INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'BBS', 'GWK', 'GateWorks'); 
INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'BBS', 'FTP', 'FTP SFTP'); 
INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'BBS', 'PRI', 'Prism'); 
INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'BBS', 'RAP', 'RapidServices'); 
INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'BBS', 'VIT', 'Vitalworks'); 
INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'COMPRESSION', 'NON', 'Not Compressed'); 
INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'COMPRESSION', 'GZP', 'GZIP'); 
INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'COMPRESSION', 'ZIP', 'PKZIP'); 
INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'ENCRYPTION', 'NON', 'Not Encrypted'); 
INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'ENCRYPTION', 'VWC', 'VWCrypto'); 
INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'PROTOCOL', 'ANY', 'Any Type'); 
INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'PROTOCOL', 'XMO', 'XModem'); 
INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'PROTOCOL', 'KER', 'Kermit'); 
INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'BBS', 'GWY', 'Gateway'); 
INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'BBS', 'PIF', 'Practice Insight SFTP'); 
INSERT INTO DEV_FED.tbloptions(seq, adddate, adduser, changedate, changeuser, groupid, typeid, description ) VALUES (DEV_FED.SEQ_TBLOPTIONS1.NEXTVAL, SYSDATE, 'TRACKING', SYSDATE, 'TRACKING', 'BBS', 'DFT', 'Dialup FTP SFTP'); 

-- ===========================================================================
--					TRIGGERS
-- ===========================================================================

--  DDL for Trigger TRG_TBLALLOWDENYMATCHING1
CREATE OR REPLACE TRIGGER DEV_FED.TRG_TBLALLOWDENYMATCHING1
BEFORE INSERT OR UPDATE
ON DEV_FED.tblAllowDenyMatching
FOR EACH ROW
DECLARE
BEGIN
  :new.Status := UPPER(:new.Status);
  :new.MatchClass := UPPER(:new.MatchClass);
  :new.MatchType := UPPER(:new.MatchType);
  :new.ClientID := UPPER(:new.ClientID);
	:new.ProductID := UPPER(:new.ProductID);
	:new.TypeID := UPPER(:new.TypeID);
	:new.DestID := UPPER(:new.DestID);
END;
/

ALTER TRIGGER DEV_FED.TRG_TBLALLOWDENYMATCHING1 ENABLE;

--  DDL for Trigger TRG_TBLAPPLICATIONS1
CREATE OR REPLACE TRIGGER DEV_FED.TRG_TBLAPPLICATIONS1
BEFORE INSERT OR UPDATE
ON DEV_FED.tblApplications
FOR EACH ROW
DECLARE
BEGIN
  :new.AppID := UPPER(:new.AppID);
END;

/
ALTER TRIGGER DEV_FED.TRG_TBLAPPLICATIONS1 ENABLE;

--  DDL for Trigger TRG_TBLCLIENTCOMM1
CREATE OR REPLACE TRIGGER DEV_FED.TRG_TBLCLIENTCOMM1
BEFORE INSERT OR UPDATE
ON DEV_FED.tblClientComm
FOR EACH ROW
DECLARE
BEGIN
	:new.ClientID := UPPER(:new.ClientID);
	:new.Status := UPPER(:new.Status);
	:new.BBSID := UPPER(:new.BBSID);
	:new.CompressionID := UPPER(:new.CompressionID);
	:new.EncryptionID := UPPER(:new.EncryptionID);
	:new.ProtocolID := UPPER(:new.ProtocolID);
	:new.ProductID := UPPER(:new.ProductID);
	:new.ClientName := UPPER(:new.ClientName);
	:new.EncryptionIDOut := UPPER(:new.EncryptionIDOut);
END;

/
ALTER TRIGGER DEV_FED.TRG_TBLCLIENTCOMM1 ENABLE;

--  DDL for Trigger TRG_TBLCLIENTENROLLMENT1
CREATE OR REPLACE TRIGGER DEV_FED.TRG_TBLCLIENTENROLLMENT1
BEFORE INSERT OR UPDATE
ON DEV_FED.tblClientEnrollment
FOR EACH ROW
DECLARE
BEGIN
	:new.ClientID := UPPER(:new.ClientID);
	:new.VWClientID := UPPER(:new.VWClientID);
	:new.ImpContact := UPPER(:new.ImpContact);
	:new.ImpPhone := UPPER(:new.ImpPhone);
	:new.ImpEmail := UPPER(:new.ImpEmail);
	:new.PSClientID := UPPER(:new.PSClientID);
	:new.Mnemonic := UPPER(:new.Mnemonic);
END;

/
ALTER TRIGGER DEV_FED.TRG_TBLCLIENTENROLLMENT1 ENABLE;

--  DDL for Trigger TRG_TBLDESTTYPES1
CREATE OR REPLACE TRIGGER DEV_FED.TRG_TBLDESTTYPES1
BEFORE INSERT OR UPDATE
ON DEV_FED.tblDestTypes
FOR EACH ROW
DECLARE
BEGIN
	:new.TypeID := UPPER(:new.TypeID);
	:new.TypeClass := UPPER(:new.TypeClass);
END;

/
ALTER TRIGGER DEV_FED.TRG_TBLDESTTYPES1 ENABLE;

--  DDL for Trigger TRG_TBLOPTIONS1
CREATE OR REPLACE TRIGGER DEV_FED.TRG_TBLOPTIONS1
BEFORE INSERT OR UPDATE
ON DEV_FED.tblOptions
FOR EACH ROW
DECLARE
BEGIN

  :new.GroupID := UPPER(:new.GroupID);
  :new.TypeID := UPPER(:new.TypeID);  
END;
/
ALTER TRIGGER DEV_FED.TRG_TBLOPTIONS1 ENABLE;

--  DDL for Trigger TRG_TBLPRODUCTS1
CREATE OR REPLACE TRIGGER DEV_FED.TRG_TBLPRODUCTS1
BEFORE INSERT OR UPDATE
ON DEV_FED.tblProducts
FOR EACH ROW
DECLARE
BEGIN
	:new.ProductID := UPPER(:new.ProductID);
	:new.BBSID := UPPER(:new.BBSID);
	:new.CompressionIDOut := UPPER(:new.CompressionIDOut);
	:new.CompressionIDIn := UPPER(:new.CompressionIDIn);
	:new.EncryptionIDOut := UPPER(:new.EncryptionIDOut);
	:new.EncryptionIDIn := UPPER(:new.EncryptionIDIn);
	:new.ProtocolID := UPPER(:new.ProtocolID);
END;

/
ALTER TRIGGER DEV_FED.TRG_TBLPRODUCTS1 ENABLE;

--  DDL for Trigger TRG_TBLSOURCETYPES1
CREATE OR REPLACE TRIGGER DEV_FED.TRG_TBLSOURCETYPES1
BEFORE INSERT OR UPDATE
ON DEV_FED.tblSourceTypes
FOR EACH ROW
DECLARE
BEGIN
	:new.TypeID := UPPER(:new.TypeID);
	:new.TypeClass := UPPER(:new.TypeClass);
END;

/
ALTER TRIGGER DEV_FED.TRG_TBLSOURCETYPES1 ENABLE;


--  DDL for Trigger TRG_TBLDESTCOMM1
CREATE OR REPLACE TRIGGER DEV_FED.TRG_TBLDESTCOMM1
BEFORE INSERT OR UPDATE
ON DEV_FED.tblDestComm
FOR EACH ROW
DECLARE
BEGIN
	:new.DestID := UPPER(:new.DestID);
	:new.DestName := UPPER(:new.DestName);
	:new.Status := UPPER(:new.Status);
	:new.CompressionIDIn := UPPER(:new.CompressionIDIn);
	:new.CompressionIDOut := UPPER(:new.CompressionIDOut);
	:new.EncryptionIDIn := UPPER(:new.EncryptionIDIn);
	:new.EncryptionIDOut := UPPER(:new.EncryptionIDOut);
	:new.ProtocolID := UPPER(:new.ProtocolID);
	:new.ProductID := UPPER(:new.ProductID);
END;
/

--  DDL for Trigger TRG_TBLDESTENROLLMENT1
CREATE OR REPLACE TRIGGER DEV_FED.TRG_TBLDESTENROLLMENT1 
BEFORE INSERT OR UPDATE
ON DEV_FED.tblDestEnrollment
FOR EACH ROW
DECLARE
BEGIN 
	:new.DestID := UPPER(:new.DestID);
	:new.VWDestID := UPPER(:new.VWDestID);
	:new.ImpContact := UPPER(:new.ImpContact);
	:new.ImpPhone := UPPER(:new.ImpPhone);
	:new.ImpEmail := UPPER(:new.ImpEmail);
	:new.PSDestID := UPPER(:new.PSDestID);
	:new.Mnemonic := UPPER(:new.Mnemonic);
END;

/
ALTER TRIGGER DEV_FED.TRG_TBLDESTENROLLMENT1 ENABLE;

-- DFLT_MSG record insertion
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'ROUTE_NOT_CONFIGURED', 'N', '15', 'C', '2100B', 'Configuration Error at HUB. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'PAYER_INACTIVE', 'N', 'T4', 'C', '2100B', 'Payer is inactive. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'ELIGIBILITY_RULES:MEMBER_ID', 'N', '72', 'C', '2100C', 'Member ID Required. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'ELIGIBILITY_RULES:SUBSCRIBER_DOB', 'N', '58', 'C', '2100C', 'Subscriber Date of Birth Required. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'ELIGIBILITY_RULES:SUBSCRIBER_FNAME', 'N', '73', 'C', '2100C', 'Subscriber First Name Required. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'ELIGIBILITY_RULES:SUBSCRIBER_LNAME', 'N', '73', 'C', '2100C', 'Subscriber Last Name Required. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'ELIGIBILITY_RULES:SUBSCRIBER_MI', 'N', '73', 'C', '2100C', 'Subscriber Middle Name Required. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'ELIGIBILITY_RULES:SUBSCRIBER_GENDER', 'N', '74', 'C', '2100C', 'Subscriber Gender Required. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'ELIGIBILITY_RULES:SUBSCRIBER_SSN', 'N', '15', 'C', '2100C', 'Subscriber SSN Required. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'PARTNER_INVALID_RESPONSE', 'N', '33', 'C', '2100B', 'Unable to process your request. Contact your Cerner representative for assistance. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'MAP_ERROR_REQUEST', 'N', '33', 'C', '2100B', 'Unable to process your request. Contact your Cerner representative for assistance. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'PAYER_ALIAS_NOT_FOUND', 'N', 'T4', 'C', '2100B', 'Payer Identifier is Missing or Invalid. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'E9Y_RESPONSE_TIMEOUT', 'N', '33', 'C', '2100B', 'Payer is Unable to Respond at Current Time. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'JSON_SERVICE_TYPE_ERROR', 'N', '80', 'C', '2100A', 'Number of Service Types requested exceed number allowed (99). CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, '270_MSG_LOOKUP:NPI', 'N', '15', 'C', '2100B', 'Facility and Provider NPI are missing. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'MAP_ERROR_RESPONSE', 'N', '33', 'C', '2100B', 'Unable to process your request. Contact your Cerner representative for assistance. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'E9Y_USER_NAME', 'N', '15', 'C', '2100B', 'User Information Is Missing or Invalid. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'E9Y_SUBMITTER_ID', 'N', '15', 'C', '2100B', 'Submitter Information is Missing or Invalid. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'E9Y_PATIENT_MRN', 'N', '15', 'C', '2100B', 'Patient Identifier is Missing. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'E9Y_PATIENT_LNAME', 'N', '73', 'C', '2100C', 'Patient Last Name Required. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'E9Y_PATIENT_FNAME', 'N', '73', 'C', '2100C', 'Patient First Name Required. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'E9Y_PATIENT_DOB', 'N', '58', 'C', '2100C', 'Patient Date of Birth Required. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'E9Y_PATIENT_GENDER', 'N', '74', 'C', '2100C', 'Patient Gender Required. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'E9Y_HEALTH_PLANID', 'N', '72', 'C', '2100C', 'HealthPlan ID Required. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'E9Y_PATIENT_RELATIONSHIP', 'N', '15', 'C', '2100D', 'Policy Relationship Required. CERNER GENERATED');
INSERT INTO DEV_FED.DFLT_MSG(dflt_msg_id, dflt_msg_cd, aaa01, aaa03, aaa04, location, msg_txt) VALUES(DEV_FED.DFLT_MSG_SEQ.NEXTVAL, 'E9Y_PROCESS_FAILURE', 'N', '33', 'C', '2100B', 'Unable to process your request. Contact your Cerner representative for assistance. CERNER GENERATED');

----------------------------------------------------------------
--			PROCEDURES
----------------------------------------------------------------
-- Procedure 1
create or replace PROCEDURE  DEV_FED.GETBBSID (
	pOwnerID IN VARCHAR2,
	oBBSID OUT VARCHAR2
)
AS
	sOwnerID VARCHAR2(15);

BEGIN
	sOwnerID := UPPER(pOwnerID);
    oBBSID := NULL;

	IF sOwnerID IS NULL THEN
    RAISE_APPLICATION_ERROR(-20100,'Owner ID Is Not Set');
	END IF;

    IF sOwnerID IS NOT NULL THEN
    select BBSID INTO oBBSID from tblClientComm where ClientID = sOwnerID;
	END IF;

    EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20002, 'BBSID is null or not readable from Database');

    WHEN OTHERS	THEN
        RAISE_APPLICATION_ERROR(-20002, SQLERRM);

END;
/

-- Procedure 2
create or replace PROCEDURE DEV_FED.GETCLIENTSTATUS
(
  CLIENT_ID IN VARCHAR2 ,
  STATUS OUT CHAR

) AS
  sClientid VARCHAR2(10) := UPPER(CLIENT_ID);
  sqlerrm		VARCHAR2 (1024);
  oStatus CHAR  := NULL;
BEGIN
 IF sClientid IS NULL THEN
        RAISE_APPLICATION_ERROR(-20100,'Client ID Is Not Set');
  END IF;

 --Check if the client is active or a test client
 SELECT status into STATUS FROM tblclientcomm WHERE clientid = sClientid ;

    /* Log all the other exceptions under exceptions block */
	EXCEPTION
		WHEN OTHERS THEN
  		sqlerrm := SQLERRM;
  		RAISE_APPLICATION_ERROR(-20002, sqlerrm);
END GETCLIENTSTATUS;
/

-- Procedure 3
create or replace PACKAGE  DEV_FED.LANG_INTEGER AS 
  /* The package is named loosely after a similar Java class, 
     java.lang.Integer; in addition, all public package functions 
     (except toRadixString() which has no Java equivalent) are named 
     after equivalent Java methods in the java.lang.Integer class. 
  */ 
 
  /* Convert a number to string in given radix. 
     Radix must be in the range [2, 16]. 
  */ 
  function toRadixString(num in number, radix in number) return varchar2; 
  pragma restrict_references (toRadixString, WNDS, WNPS, RNDS, RNPS); 
 
  /* Convert a number to binary string. */ 
  function toBinaryString(num in number) return varchar2; 
  pragma restrict_references (toBinaryString, WNDS, WNPS, RNDS, RNPS); 
 
  /* Convert a number to hexadecimal string. */ 
  function toHexString(num in number) return varchar2; 
  pragma restrict_references (toHexString, WNDS, WNPS, RNDS, RNPS); 
 
  /* Convert a number to octal string. */ 
  function toOctalString(num in number) return varchar2; 
  pragma restrict_references (toOctalString, WNDS, WNPS, RNDS, RNPS); 
 
  /* Convert a string, expressed in decimal, to number. */ 
  function parseInt(s in varchar2) return number; 
  pragma restrict_references (parseInt, WNDS, WNPS, RNDS, RNPS); 
 
  /* Convert a string, expressed in given radix, to number. 
     Radix must be in the range [2, 16]. 
  */ 
  function parseInt(s in varchar2, radix in number) return number; 
  pragma restrict_references (parseInt, WNDS, RNDS); 
END LANG_INTEGER; 
/

create or replace PACKAGE BODY DEV_FED.LANG_INTEGER as 
  /* Takes a number between 0 and 15, and converts it to a string (character) 
     The toRadixString() function calls this function. 
 
     The caller of this function is responsible for making sure no invalid 
     number is passed as the argument.  Valid numbers include non-negative 
     integer in the radix used by the calling function.  For example, 
     toOctalString() must pass nothing but 0, 1, 2, 3, 4, 5, 6, and 7 as the 
     argument 'num' of digitToString(). 
  */ 
  function digitToString(num in number) return varchar2 as 
    digitStr varchar2(1); 
  begin 
    if (num<10) then 
      digitStr := to_char(num); 
    else 
      digitStr := chr(ascii('A') + num - 10); 
    end if; 
 
    return digitStr; 
  end digitToString; 
 
  /* Takes a character (varchar2(1)) and converts it to a number. 
     The parseInt() function calls this function. 
 
     The caller of this function is responsible for maksing sure no invalid 
     string is passed as the argument.  The caller can do this by first 
     calling the isValidNumStr() function. 
  */ 
  function digitToDecimal(digitStr in varchar2) return number as 
    num number; 
  begin 
    if (digitStr >= '0') and (digitStr <= '9') then 
      num := ascii(digitStr) - ascii('0'); 
    elsif (digitStr >= 'A') and (digitStr <= 'F') then 
      num := ascii(digitStr) - ascii('A') + 10; 
    end if; 
 
    return num; 
  end digitToDecimal; 
 
  /* Checks if the given string represents a valid number in given radix. 
     Returns true if valid; ORA-6502 if invalid. 
  */ 
  function isValidNumStr(str in out varchar2,radix in number) return boolean 
as 
    validChars varchar2(16) := '0123456789ABCDEF'; 
    valid number; 
    len number; 
    i number; 
    retval boolean; 
  begin 
    if (radix<2) or (radix>16) or (radix!=trunc(radix)) then 
      i := to_number('invalid number');  /* Forces ORA-6502 when bad radix. */ 
    end if; 
str := upper(str);  /* a-f ==> A-F */ 
    /* determine valid characters for given radix */ 
    validChars := substr('0123456789ABCDEF', 1, radix); 
    valid := 1; 
    len := length(str); 
    i := 1; 
 
    while (valid !=0) loop 
      valid := instr(validChars, substr(str, i, 1)); 
      i := i + 1; 
    end loop; 
 
    if (valid=0) then 
      retval := false; 
      i := to_number('invalid number');  /* Forces ORA-6502. */ 
    else 
      retval := true; 
    end if; 
 
    return retval; 
  end isValidNumStr; 
 
  /* This function converts a number into a string in given radix. 
     Only non-negative integer should be passed as the argument num, and 
     radix must be a positive integer in [1, 16]. 
     Otherwise, 'ORA-6502: PL/SQL: numeric or value error' is raised. 
  */ 
  function toRadixString(num in number, radix in number) return varchar2 as 
    dividend number; 
    divisor number; 
    remainder number(2); 
    numStr varchar2(2000); 
  begin 
    /* NULL NUMBER -> NULL hex string */ 
    if(num is null) then 
      return null; 
    elsif (num=0) then  /* special case */ 
      return '0'; 
    end if; 
 
    /* 
	invalid number or radix; force ORA-6502: PL/SQL: numeric or value err 
	*/
    if (num<0) or (num!=trunc(num)) or 
       (radix<2) or (radix>16) or (radix!=trunc(radix)) then 
      numStr := to_char(to_number('invalid number'));  /* Forces ORA-6502. */ 
      return numStr; 
    end if; 
 
    dividend := num; 
    numStr := '';  /* start with a null string */ 
 
    /* the actual conversion loop */ 
    while(dividend != 0) loop 
      remainder := mod(dividend, radix); 
      numStr := digitToString(remainder) || numStr; 
      dividend := trunc(dividend / radix); 
    end loop; 
 
    return numStr; 
  end toRadixString; 
 
  function toBinaryString(num in number) return varchar2 as 
  begin 
    return toRadixString(num, 2); 
  end toBinaryString; 
 
  function toHexString(num in number) return varchar2 as 
  begin 
    return toRadixString(num, 16); 
  end toHexString; 
 
  function toOctalString(num in number) return varchar2 as 
  begin 
    return toRadixString(num, 8); 
  end toOctalString; 
 
  /* The parseInt() function is equivalent to TO_NUMBER() when called 
     without a radix argument.  This is consistent with what Java does. 
  */ 
  function parseInt(s in varchar2) return number as 
  begin 
    return to_number(s); 
  end parseInt; 
 
  /* Converts a string in given radix to a number */ 
  function parseInt(s in varchar2, radix in number) return number as 
    str varchar2(2000); 
    len number; 
    decimalNumber number; 
  begin 
    /* NULL hex string -> NULL NUMBER */ 
    if(s is null) then 
      return null; 
    end if; 
 
    /* Because isValidNumStr() expects a IN OUT parameter, must use an 
       intermediate variable str.  str will be converted to uppercase 
       inside isValidNumStr(). 
    */ 
    str := s; 
    if (isValidNumStr(str, radix) = false) then 
      return -1;  /* Never executes because isValidNumStr forced ORA-6502. */ 
    end if; 
 
    len := length(str); 
    decimalNumber := 0; 
 
    /* the actual conversion loop */ 
    for i in 1..len loop 
      decimalNumber := decimalNumber*radix + digitToDecimal(substr(str, i, 
1)); 
    end loop; 
 
    return decimalNumber; 
  end parseInt; 
end LANG_INTEGER; 
/
